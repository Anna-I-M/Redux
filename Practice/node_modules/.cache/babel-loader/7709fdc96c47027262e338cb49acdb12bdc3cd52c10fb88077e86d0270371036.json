{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addQuantity(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    extractQuantity(state) {\n      state.totalQuantity--;\n    },\n    addItem(state, action) {\n      state.totalAmount = state.totalAmount + action.payload;\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addQuantity","state","action","newItem","payload","existingItem","find","item","id","push","itemId","title","price","quantity","totalPrice","extractQuantity","addItem","totalAmount","cartActions","actions","reducer"],"sources":["/home/ani/Desktop/React course/Redux/Practice/src/store/cart.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCartState = { items: [], totalQuantity: 0 };\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addQuantity(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          name: newItem.title,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    extractQuantity(state) {\n      state.totalQuantity--;\n    },\n    addItem(state, action) {\n      state.totalAmount = state.totalAmount + action.payload;\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG;EAAEC,KAAK,EAAE,EAAE;EAAEC,aAAa,EAAE;AAAE,CAAC;AACxD,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEL,gBAAgB;EAC9BM,QAAQ,EAAE;IACRC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAK,CAACY,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAEvE,IAAI,CAACH,YAAY,EAAE;QACjBJ,KAAK,CAACP,KAAK,CAACe,IAAI,CAAC;UACfC,MAAM,EAAEP,OAAO,CAACK,EAAE;UAClBX,IAAI,EAAEM,OAAO,CAACQ,KAAK;UACnBC,KAAK,EAAET,OAAO,CAACS,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAEX,OAAO,CAACS;QACtB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLP,YAAY,CAACQ,QAAQ,EAAE;QACvBR,YAAY,CAACS,UAAU,GAAGT,YAAY,CAACS,UAAU,GAAGX,OAAO,CAACS,KAAK;MACnE;IACF,CAAC;IACDG,eAAeA,CAACd,KAAK,EAAE;MACrBA,KAAK,CAACN,aAAa,EAAE;IACvB,CAAC;IACDqB,OAAOA,CAACf,KAAK,EAAEC,MAAM,EAAE;MACrBD,KAAK,CAACgB,WAAW,GAAGhB,KAAK,CAACgB,WAAW,GAAGf,MAAM,CAACE,OAAO;IACxD;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMc,WAAW,GAAGtB,SAAS,CAACuB,OAAO;AAE5C,eAAevB,SAAS,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}